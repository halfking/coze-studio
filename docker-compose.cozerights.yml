version: '3.8'

services:
  # Coze Studio 主服务
  coze-server:
    build: .
    ports:
      - "8888:8888"
    environment:
      - LISTEN_ADDR=:8888
      - LOG_LEVEL=info
      - MYSQL_DSN=root:coze123@tcp(mysql:3306)/opencoze?charset=utf8mb4&parseTime=True
      - REDIS_ADDR=redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_AK=minioadmin
      - MINIO_SK=minioadmin123
      - MINIO_SECURE=false
      - STORAGE_BUCKET=opencoze
      - COZERIGHTS_ENABLED=true
      - COZERIGHTS_URL=http://cozerights-server:8080
    depends_on:
      - mysql
      - redis
      - minio
      - cozerights-server
    volumes:
      - ./backend/conf:/app/conf
      - ./logs/coze:/app/logs
    restart: unless-stopped
    networks:
      - coze-network

  # CozeRights 权限管理服务
  cozerights-server:
    build: 
      context: ./backend
      dockerfile: Dockerfile.cozerights
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=cozerights123
      - DB_NAME=cozerights
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-your-encryption-key}
      - LOG_LEVEL=info
      - COZE_MYSQL_DSN=root:coze123@tcp(mysql:3306)/opencoze?charset=utf8mb4&parseTime=True
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend/configs:/app/configs
      - ./logs/cozerights:/app/logs
    restart: unless-stopped
    networks:
      - coze-network

  # 数据同步服务
  data-sync-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.sync
    environment:
      - COZE_MYSQL_DSN=root:coze123@tcp(mysql:3306)/opencoze?charset=utf8mb4&parseTime=True
      - COZERIGHTS_PG_DSN=postgres://postgres:cozerights123@postgres:5432/cozerights?sslmode=disable
      - SYNC_INTERVAL=300s
      - LOG_LEVEL=info
    depends_on:
      - mysql
      - postgres
      - cozerights-server
    volumes:
      - ./logs/sync:/app/logs
    restart: unless-stopped
    networks:
      - coze-network

  # MySQL 数据库 (Coze Studio)
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: coze123
      MYSQL_DATABASE: opencoze
      MYSQL_USER: coze
      MYSQL_PASSWORD: coze123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/volumes/mysql/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./docker/volumes/mysql/init.sql:/docker-entrypoint-initdb.d/02-init.sql
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    networks:
      - coze-network

  # PostgreSQL 数据库 (CozeRights)
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: cozerights
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: cozerights123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - coze-network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - coze-network

  # MinIO 对象存储
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    restart: unless-stopped
    networks:
      - coze-network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - coze-server
      - cozerights-server
    restart: unless-stopped
    networks:
      - coze-network

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - coze-network

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - coze-network

volumes:
  mysql_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  coze-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
